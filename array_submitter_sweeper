#!/usr/bin/bash

# For SLURM see: https://docs.computecanada.ca/wiki/Using_GPUs_with_Slurm and https://docs.computecanada.ca/wiki/Running_jobs
# For PBS see: https://hpcc.usc.edu/support/documentation/running-a-job-on-the-hpcc-cluster-using-pbs/
# Comparing commands see: https://hpcc.usc.edu/support/documentation/pbs-to-slurm/

# THIS SCRIPT ALLOWS ONLY THE USE OF A SINGLE NODE!

# For SLURM: each submission is considered a SINGLE task (UNLESS WE USE MPI)

# IF USING MPI WITH SEVERAL "TASKS" - I.E. USING SEVERAL NODES: USE DIFFERENT SCRIPT

# determine cluster used
if [[ "$(hostname)" == *"borg"* ]]; then
    CLUSTER="PLAI"
elif [[ "$(hostname)" == *"cedar"* ]] || [[ "$(hostname)" == *"gra"* ]]; then
    CLUSTER="CC"
fi

# general settings
PROJECT_DIR="tri-density-matching" # project name
EXP_NAME="maps-sweeper"
CPUS_PER_TASK=6
ACCOUNT='rrg-kevinlb' # def-fwood or rrg-kevinlb
REPEATS=1
MEM="32G" # G/M is Gigabyte/Megabyte
TIME="0-12:00:00" # <DD-HH:MM:SS>
GPUS=1 # set to 0 to not ask for any
# PLAI specific arguments - partition (plai/plai_towers/plai_cpus)
PARTITION="plai"

# specify working directory where the container need write permissions
# (MAKE SURE IT CORRESPONDS WITH WHATEVER IS DEFINED IN SINGULARITY FILE)
WORKDIR_MOUNT="/workdir"
RESULTS_MOUNT="/results" # where results is located in the singularity container
# container name
CONTAINER_NAME="container.sif"
# LEAVE EMPTY SO THAT WE DO NOT COPY ANYTHING TO SLURM_TMPDIR
STUFF_TO_TMP=""

# wandb sweeper id and number of sweeps
CMD_BASE="wandb agent --count 1 ${wandb-sweeper-id}"
SWEEPERID=""
N=1

# clear array_command_list.txt before putting thins into it
array_commands="array_command_list_${EXP_NAME}.txt"
> "${array_commands}"
for i in $(seq $N); do
    echo "${CMD_BASE}" >> "${array_commands}"
done

# Directory where this script is called
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

EXP_DIR="$(dirname "$DIR")" # get parent of parent directory from where this script is called (assumes submitted from exp_dir/hpc_scripts)

# set base directory names to store results from jobs (specific directory will be given in the job script)
if [ ! -z ${SCRATCH} ]; then

    BASEDIR="${SCRATCH}/${PROJECT_DIR}"

    # create hpc_output directory if it does not exist
    if [ ! -d "${BASEDIR}/${EXP_NAME}/hpc_output" ]; then
        mkdir -p "${BASEDIR}/${EXP_NAME}/hpc_output"
    fi

    if [ ! -d "${BASEDIR}/${EXP_NAME}/results" ]; then
        mkdir -p "${BASEDIR}/${EXP_NAME}/results"
    fi

    VARIABLES="CODE_DIR=${EXP_DIR},WORKDIR_MOUNT=${WORKDIR_MOUNT},\
CONTAINER=${CONTAINER_NAME},RESULTS_MOUNT=${RESULTS_MOUNT},\
STUFF_TO_TMP=${STUFF_TO_TMP}, BASEDIR=${BASEDIR}"

    # SUBMIT JOBS
    sbatch_cmd="--job-name=${EXP_NAME} \
                --time=${TIME} \
                --cpus-per-task=${CPUS_PER_TASK} \
                --ntasks-per-core=1 \
                --ntasks=1 \
                --mem=${MEM} \
                --chdir=${BASEDIR} \
                -o ${BASEDIR}/${EXP_NAME}/hpc_output/${EXP_NAME}_%A_%a.out \
                --export=ALL,CMD=\"${CMD_N}\",\"${VARIABLES}\",EXP_NAME=${EXP_NAME}"

    re='^[0-9]+$'
    if  [[ ! $GPUS =~ $re ]] ; then
        echo "error: GPUS must be interger" >&2; exit 1
    else
        if [[ "$CLUSTER" = "PLAI" ]]; then
            if [[ "$GPUS" != "0" ]]; then
                sbatch_cmd="${sbatch_cmd} --gres=gpu:${GPUS}"
            fi
            sbatch_cmd="${sbatch_cmd} --array=1-${N}%10 --partition=${PARTITION}"
            for _ in $(seq $REPEATS); do
                bash -c "sbatch ${sbatch_cmd[@]} ~/hpc/plai_array_job.sh"
                sleep 1
            done
        elif [[ "$CLUSTER" = "CC" ]]; then
            if [[ "$GPUS" != "0" ]]; then
                sbatch_cmd="${sbatch_cmd} --gres=gpu:v100l:${GPUS}"
            fi
            sbatch_cmd="${sbatch_cmd} --account=${ACCOUNT} --array=1-${N}"
            for _ in $(seq $REPEATS); do
                bash -c "sbatch ${sbatch_cmd[@]} ~/hpc/cc_array_job.sh"
                sleep 1
            done
        fi
        sleep 1 # sleep so that we do not overwhelm the scheduler (SEE e.g. compute canada's website)
    fi
else
    echo "error while submitting job (maybe you aren't on an hpc?)" >&2; exit 1
fi
